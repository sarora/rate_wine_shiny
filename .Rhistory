B <- rbind(B,nt)
}
set.seed(1234)
B = matrix(nrow=0,ncol=2)
### This algo was done in a group of Jordan, Abhishek, me, Tyler.
for(i in 1:5000){
val <-  runif(1)
if((val) < phis[1]){
nt <-  mvtnorm::rmvnorm(1, mean = mean1,sigma = diag(c(variance1)))
}
else if(val < (phis[1] + phis[2])){
nt <-   mvtnorm::rmvnorm(1, mean = mean2,sigma = diag(c(variance2)))
}
else{
nt <-  mvtnorm::rmvnorm(1, mean = mean3,sigma = diag(c(variance3)))
}
B <- rbind(B,nt)
}
library(tidyverse)
library(cluster)
library(mvtnorm)
library(mclust)
library(factoextra)
library(tidyverse)
library(cluster)
library(mvtnorm)
library(mclust)
library(factoextra)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
X <- rnorm(1000,mean=0,sd=1)
Y <- rnorm(1000,mean=5,sd=sqrt(2))
Z <- X + Y
paste("The mean of Z is:", mean(Z))
paste("The variance of Z is:", (sd(Z)^2))
ggplot() + geom_density(aes(x=Z)) +
labs(title= "Z = X + Y")  +
geom_vline(xintercept = mean(Z)) +
annotate("text", x = mean(Z) + 0.06,y=0.05, angle = 90 , label="mean = 5, sd = 1.75") +
theme(plot.title = element_text(hjust = 0.5))
set.seed(1234)
Z <- matrix(nrow = 10000, ncol = 1)
for(i in 1:10000){
if(runif(1) < 0.5)
Z[i] = 1*rnorm(1) + 0
else
Z[i] = sqrt(2)*rnorm(1) + 5
}
paste("The mean of Z is:", mean(Z))
paste("The variance of Z is:", (sd(Z))^2)
ggplot() + geom_density(aes(x=Z)) + labs(title= "Bi Modal")
Z = 0.5 * X + 0.5 * Y
hist(Z)
X <- read_rds("data/clusterData.rds")$X
d <- dist(as.data.frame(X), method='euclidean')
a <- pam(d, k=4)
fviz_silhouette(a)
a <- pam(d, k=2)
fviz_silhouette(a)
plot(cl <- hclust(d, method='ward.D2'), main='', xlab='', sub='', hang=-1)
rect.hclust(cl, k=4, border='red')
fviz_dend(cl, k = 2 ,main = "Cluster dendogram - Euclidean Distance",rect = TRUE,show_labels = FALSE,rect_border = "black")
ct<- (cutree(cl, k=2))
X <- as.data.frame(X)
ggplot(X, aes(V1,V2)) + geom_point(colour = as.factor(as.numeric(ct)))
##Re-comp the phis
phis<- t(apply(responsibilities,2,mean))
clust_dat <- read_rds("data/clusterData.rds")
clust_data <- read_rds("data/clusterData.rds")
clust_dat <- as.data.frame(clust_dat)
E.step <- function(X) {
prob1 <- phis[1] * dmvnorm(c(X),mean= mu1,sigma = diag(var1))
prob2 <- phis[2] * dmvnorm(c(X),mean= mu2,sigma = diag(var2))
prob3 <- phis[3] * dmvnorm(c(X),mean= mu3,sigma= diag(var3))
(cbind((prob1),(prob2),(prob3)))
}
responsibilities <- (t(apply(clust_dat,1,E.step)))
mu1 <- c(-10, -8)  # Mean of cluster 1
var1 <- c(3, 2)    # Variances of cluster 1
mu2 <- c(12, -4)   # Mean of cluster 2
var2 <- c(4, 2.5)  # ...etc...
mu3 <- c(4, 18)
var3 <- c(42, 8.5)
phis <- c(0.4, 0.2, 0.4) # Mixture probabilities.
clust_dat <- read_rds("data/clusterData.rds")
clust_data <- read_rds("data/clusterData.rds")
clust_dat <- as.data.frame(clust_dat)
E.step <- function(X) {
prob1 <- phis[1] * dmvnorm(c(X),mean= mu1,sigma = diag(var1))
prob2 <- phis[2] * dmvnorm(c(X),mean= mu2,sigma = diag(var2))
prob3 <- phis[3] * dmvnorm(c(X),mean= mu3,sigma= diag(var3))
(cbind((prob1),(prob2),(prob3)))
}
responsibilities <- (t(apply(clust_dat,1,E.step)))
#normalize
responsibilities <- responsibilities/rowSums(responsibilities)
##Re-comp the phis
phis<- t(apply(responsibilities,2,mean))
phis
mean1 <- colSums(responsibilities[,1]*clust_dat)/ colSums(responsibilities)[1]
mean2 <- colSums(responsibilities[,2]*clust_dat)/ colSums(responsibilities)[2]
mean3 <- colSums(responsibilities[,3]*clust_dat)/ colSums(responsibilities)[3]
variance1 <- (colSums(responsibilities[,1] * sweep(clust_dat,2,mean1,FUN = "-")^2) / colSums(responsibilities)[1])
variance2 <- (colSums(responsibilities[,2] * sweep(clust_dat,2,mean2,FUN = "-")^2) / colSums(responsibilities)[2])
variance3 <- (colSums(responsibilities[,3] * sweep(clust_dat,2,mean3,FUN = "-")^2) / colSums(responsibilities)[3])
### New Means
mean1
mean2
mean3
###  New variances
variance1
variance2
variance3
Hard.step <- function(X) {
prob1 <- phis[1] * dmvnorm(c(X),mean= mean1,sigma = diag(c(variance1)))
prob2 <- phis[2] * dmvnorm(c(X),mean= mean2,sigma = diag(c(variance2 )))
prob3 <- phis[3] * dmvnorm(c(X),mean= mean3,sigma= diag(c(variance3)))
(cbind((prob1),(prob2),(prob3)))
}
clust_plot <- as.data.frame(t(apply(clust_dat,1,Hard.step)))
findMax <- function(X){
which.max(c(X))
}
clust_dat$K <- (apply(clust_plot,1,findMax))
set.seed(1234)
B = matrix(nrow=0,ncol=2)
### This algo was done in a group of Jordan, Abhishek, me, Tyler.
for(i in 1:5000){
val <-  runif(1)
if((val) < phis[1]){
nt <-  mvtnorm::rmvnorm(1, mean = mean1,sigma = diag(c(variance1)))
}
else if(val < (phis[1] + phis[2])){
nt <-   mvtnorm::rmvnorm(1, mean = mean2,sigma = diag(c(variance2)))
}
else{
nt <-  mvtnorm::rmvnorm(1, mean = mean3,sigma = diag(c(variance3)))
}
B <- rbind(B,nt)
}
ggplot(clust_dat,aes(X.1,X.2))+
geom_density2d(data= as_data_frame(B), aes(X.1,X.2))+
geom_point(aes(colour=factor(K))) +
theme_minimal() + ggtitle("Cluster Data- EM Algorithm")
AIC = 2*3-(2*sum(log(colSums(responsibilities))))
paste(AIC)
fit1 <- Mclust(clust_data$X)
fviz_mclust(fit1, "BIC", palette = "jco")
fit1 <- Mclust(clust_data$X)
fviz_mclust(fit1, "BIC", palette = "jco")
AIC = 2*3-(2*sum(log(colSums(responsibilities))))
paste(AIC)
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>% spread(country, vote)
### replacing NAs with mode
c_mat_wi_na<- apply(mydata, 2, function(x){
x[is.na(x)] <- as.numeric((names(which.max(table(x)))))
return(x)})
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>% spread(country, vote)
### replacing NAs with mode
c_mat_wi_na<- apply(mydata, 2, function(x){
x[is.na(x)] <- as.numeric((names(which.max(table(x)))))
return(x)})
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>% spread(country, vote)
Country_mat <- as.matrix(Country_df[,-1])
mydata = as.data.frame(Country_mat)
### replacing NAs with mode
c_mat_wi_na<- apply(Country_mat, 2, function(x){
x[is.na(x)] <- as.numeric((names(which.max(table(x)))))
return(x)})
c_mat_wi_na <- as.data.frame(c_mat_wi_na)
Country_mat <- as.matrix(c_mat_wi_na[,-1])
rownames(Country_mat) <- Country_df$rcid
#Calculate Distance matrix
Dist_country<- dist(t(Country_mat), method = "euclidean")
## Using distance matrix
fit <- Mclust(Dist_country)
# BIC values used for choosing the number of clusters and model.
fviz_mclust(fit, "BIC", palette = "jco")
fit <- Mclust(Dist_country,9,"VII")
# Classification: plot showing the clustering
fviz_mclust(fit, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
# Classification uncertainty
fviz_mclust(fit, "uncertainty", palette = "jco")
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>% spread(country, vote)
Country_mat <- as.matrix(Country_df[,-1])
### replacing NAs with mode
c_mat_wi_na<- apply(Country_mat, 2, function(x){
x[is.na(x)] <- as.numeric((names(which.max(table(x)))))
return(x)})
c_mat_wi_na <- as.data.frame(c_mat_wi_na)
Country_mat <- as.matrix(c_mat_wi_na[,-1])
rownames(Country_mat) <- Country_df$rcid
#Calculate Distance matrix
Dist_country<- dist(t(Country_mat), method = "euclidean")
## Using distance matrix
fit <- Mclust(Dist_country)
# BIC values used for choosing the number of clusters and model.
fviz_mclust(fit, "BIC", palette = "jco")
fit <- Mclust(Dist_country,9,"VII")
# Classification: plot showing the clustering
fviz_mclust(fit, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
# Classification uncertainty
fviz_mclust(fit, "uncertainty", palette = "jco")
?dist
View(wine)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE)
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
colSums(sapply(wine, is.na))
wine<- apply(wine, 2, function(x){
x[is.na(x)] <- "Not Known"
return(x)})
View(wine)
wine<- apply(wine, 2, function(x){
x[is.na(x)] <- 0
return(x)})
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE)
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
colSums(sapply(wine, is.na))
wine<- apply(wine, 2, function(x){
x[is.na(x)] <- 0
})
View(wine)
wine[is.na(wine)] <- "Not Known"s
wine[is.na(wine)] <- "Not Known"
View(wine)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE)
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
View(wine)
colSums(sapply(wine, is.na))
write.csv(wine, file = "wine.csv",row.names=FALSE)
write.csv(wine, file = "data/wine.csv",row.names=FALSE)
shiny::runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
faithful
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('C:/Users/sid/Desktop/sdasda')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
?sliderInput
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
min(wine$points)
min(wine$points)
max(wine$points)
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
unique(wine$variety)
runApp('GitHub/Block4-MDS/Viz-2/DSCI_532_lab1_siddfury')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
wine %>% group_by(variety) %>% summarise(count=n())
if(null==null)
null==null
null == null
wine %>% group_by(variety,country) %>% summarise(count=n())
wine %>% group_by(country, variety) %>% summarise(count=n())
wine %>% group_by( variety) %>% summarise(count=n())
wine %>% filter(country == "Us")
wine %>% filter(country == "US")
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count = n())
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,desc)
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v)
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,desc)
?arrange
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,desc)
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v)
des
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(count_v,asc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
unique(wine$country)
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine$variety
wine$country
wine %>%select(country,variety) %>%  filter(country == "France") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "France") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "England") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(variety) %>%   group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
?selectInput
runApp('GitHub/Block4-MDS/Viz-2/DSCI_532_lab1_siddfury')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
wine %>%select(variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
enc2utf8(as(wine$title, "character"))
Encoding(wine$title) <- "UTF-8"
View(wine)
enc2utf8(as(wine$title, "character"))
wine$title<- enc2utf8(as(wine$title, "character"))
View(wine)
??read_csv
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
enc2utf8(as(wine$title, "character"))
View(wine)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
wine$title<- enc2utf8(as(wine$title, "character"))
View(wine)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
wine$title<- enc2utf8(as(wine$title, "character"))
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
min(wine$points)
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
colSums(sapply(wine, is.na))
paste("The number of duplicated rows are", nrow(wine) - nrow(unique(wine)))
write.csv(wine, file = "data/wine.csv",row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
wine$title<- enc2utf8(as(wine$title, "character"))
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
min(wine$points)
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
colSums(sapply(wine, is.na))
paste("The number of duplicated rows are", nrow(wine) - nrow(unique(wine)))
write.csv(wine, file = "data/wine.csv",row.names=FALSE)
wine %>%select(country,variety) %>%  filter(country == "France") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "England") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine$title<- enc2utf8(as(wine$title, "character"))
Encoding(wine$title) <- "UTF-8"
View
wine %>%select(variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
wine$title<- enc2utf8(as(wine$title, "character"))
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
min(wine$points)
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
colSums(sapply(wine, is.na))
paste("The number of duplicated rows are", nrow(wine) - nrow(unique(wine)))
write.csv(wine, file = "data/wine.csv",row.names=FALSE)
wine %>%select(country,variety) %>%  filter(country == "France") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "US") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(country,variety) %>%  filter(country == "England") %>% group_by(variety) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(variety) %>%   group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
wine %>%select(variety) %>% group_by(country) %>% summarise(count_v = n()) %>% arrange(desc(count_v))
View(wine)
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
runApp('GitHub/Block4-MDS/Viz-2/DSCI_532_lab1_siddfury')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
Encoding(wine$title) = "UTF-8"
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
wine$title<- enc2utf8(as(wine$title, "character"))
View(wine$title)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
#wine$title<- enc2utf8(as(wine$title, "character"))
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
min(wine$points)
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
colSums(sapply(wine, is.na))
paste("The number of duplicated rows are", nrow(wine) - nrow(unique(wine)))
write.csv(wine, file = "data/wine.csv",row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
plot(pressure)
wine <- readr::read_csv("data/winemag-data-130k-v2.csv", col_names=TRUE )
#wine$title<- enc2utf8(as(wine$title, "character"))
wine <- select(wine,-c(taster_name,taster_twitter_handle,region_2))
glimpse(wine)
### https://stackoverflow.com/questions/21951605/how-count-elements-in-an-column-that-are-not-empty
BlankValues <- function(X) {
sum(grepl("^\\s+$|^$",X))
}
apply(wine,2,BlankValues)
colSums(sapply(wine, is.na))
min(wine$points)
#Cabernet Sauvignon: the actual value) (https://www.wine-searcher.com/wine-17569-1999-carmen-gold-reserve-cabernet-sauvignon-maipo-valley-chile)
replace = which(is.na(wine$variety))
wine[replace, "variety"] = "Cabernet Sauvignon"
wine[is.na(wine)] <- "Not Known"
colSums(sapply(wine, is.na))
paste("The number of duplicated rows are", nrow(wine) - nrow(unique(wine)))
write.csv(wine, file = "data/wine_fil.csv",row.names=FALSE)
runApp('GitHub/Block4-MDS/Viz-2/Milestone2')
shiny::runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
runApp('~/GitHub/Block4-MDS/Viz-2/DSCI_532_lab1_siddfury')
runApp('~/GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
install.packages("plotly")
runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
devtools::install_github('hadley/ggplot2')
devtools::install_github('hadley/ggplot2')
shiny::runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
devtools::install_github('hadley/ggplot2')
runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
devtools::install_github('hadley/ggplot2')
shiny::runApp('GitHub/Block4-MDS/Viz-2/Milestone2Viz/rate_wine_shiny')
